package midterm;
import simView.*;
import java.awt.*;

public class ef extends ViewableDigraph {
	
	public ef()	{
		// 상위 모델인 efp에서 관리됨
		this("ef", 20, 1000);
	}
	
	// constructor
	public ef(String name, double int_arr_t, double observe_t)	{
		super(name);
		// inport, outport 선언
		addInport("in");
		addOutport("out");
		
		// myChamp, transd 선언
		ViewableAtomic myChamp = new myChamp("myChamp", int_arr_t);
		ViewableAtomic transducer = new transd("transducer", observe_t);
		
		// myChamp, transd 선언
		add(myChamp);
		add(transducer);
		
		// port 간 연결
		addCoupling(myChamp, "out", transducer, "ariv");    // myChamp의 out -> transducer의 ariv
		addCoupling(myChamp, "out", this, "out");	        // myChamp의 out -> this의 out
		addCoupling(transducer, "out", myChamp, "in");		// transduder의 out -> myChamp의 in
		addCoupling(this, "in", transducer, "solved");		// this의 in -> transduder의 solv
	}

    
    /**
     * Automatically generated by the SimView program.
     * Do not edit this manually, as such changes will get overwritten.
     */
    public void layoutForSimView()    {
        preferredSize = new Dimension(553, 331);
        ((ViewableComponent)withName("transducer")).setPreferredLocation(new Point(157, 144));
        ((ViewableComponent)withName("myChamp")).setPreferredLocation(new Point(180, 28));
    }
}
